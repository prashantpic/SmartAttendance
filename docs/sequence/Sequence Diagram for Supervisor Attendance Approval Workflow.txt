sequenceDiagram
    actor "Flutter Mobile App" as FlutterMobileApp
    participant "Firestore Database" as FirestoreDB
    participant "Notification Dispatcher" as NotificationDispatcher
    participant "FCM Service" as FCMService

    activate FlutterMobileApp
    note over FlutterMobileApp: Supervisor initiates by viewing their approval dashboard.
    FlutterMobileApp-FirestoreDB: 1. query(approverHierarchy contains myId, status=='Pending')
    activate FirestoreDB
    note right of FirestoreDB: This efficient query uses the denormalized approverHierarchy array, a core performance optimization.
    FirestoreDB--FlutterMobileApp: list
    deactivate FirestoreDB

    FlutterMobileApp-FlutterMobileApp: 2. renderApprovalList(records)

    FlutterMobileApp-FirestoreDB: 3. update(attendanceId, {status:'Approved', approvalDetails:{...}})
    deactivate FlutterMobileApp
    activate FirestoreDB
    
    note right of FirestoreDB: The trigger is asynchronous. The app UI can update immediately after the write is acknowledged.
    FirestoreDB-NotificationDispatcher: 4. onUpdate(AttendanceRecord) trigger
    deactivate FirestoreDB
    activate NotificationDispatcher
    
    NotificationDispatcher-NotificationDispatcher: 4.1. Verify status change and get subordinate's userId
    
    NotificationDispatcher-FirestoreDB: 4.2. get(User, subordinate.userId)
    activate FirestoreDB
    FirestoreDB--NotificationDispatcher: User document with fcmToken
    deactivate FirestoreDB
    
    NotificationDispatcher-FCMService: 4.3. sendPushNotification(to: fcmToken, payload)
    activate FCMService
    deactivate NotificationDispatcher
    
    note over FlutterMobileApp: This interaction is with the Subordinate's device instance, not the Supervisor's.
    FCMService-FlutterMobileApp: 5. pushNotification(payload)
    deactivate FCMService
    
    activate FlutterMobileApp
    FlutterMobileApp-FlutterMobileApp: 6. Display notification to Subordinate
    deactivate FlutterMobileApp