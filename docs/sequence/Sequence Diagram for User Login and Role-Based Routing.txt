sequenceDiagram
    actor User
    participant Client as "Smart Attendance App (Client)"
    participant FirebaseAuth as "Firebase Authentication"

    User-Client: 1. Enters credentials and taps 'Login'
    activate Client

    alt Login Flow
        alt Success Scenario
            Client-FirebaseAuth: 2.1.1. signInWithEmailAndPassword(email, password)
            activate FirebaseAuth
            note right of FirebaseAuth: Using Firebase Auth Custom Claims allows the client to get the user's role and tenantId from the secure ID Token immediately after login. This avoids a subsequent, slower round-trip to the Firestore database to fetch the user's profile, enabling faster, more secure role-based routing.
            FirebaseAuth-FirebaseAuth: 2.1.1.1. Validate credentials against user store
            FirebaseAuth-FirebaseAuth: 2.1.1.2. Retrieve pre-configured custom claims (tenantId, role, status)
            FirebaseAuth-FirebaseAuth: 2.1.1.3. Create and sign ID Token (JWT) with user info and custom claims
            FirebaseAuth--Client: AuthCredential { idToken, user }
            deactivate FirebaseAuth

            Client-Client: 2.1.2. Decode ID Token to extract claims { role, status, tenantId }
            
            alt Check User Status from Claim
                alt if status == 'Active'
                    Client-Client: 2.1.3.1.1. Route to correct dashboard based on 'role' claim (e.g., SupervisorDashboard)
                else if status == 'Deactivated'
                    Client-Client: 2.1.3.2.1. Display 'Account is deactivated' error to user
                end
            end

        else Failure Scenario: Invalid Credentials
            Client-FirebaseAuth: 2.2.1. signInWithEmailAndPassword(email, password)
            activate FirebaseAuth
            FirebaseAuth--Client: Error: 'invalid-credential'
            deactivate FirebaseAuth
            Client--User: 2.2.2. Display 'Invalid email or password' error
    end
    deactivate Client